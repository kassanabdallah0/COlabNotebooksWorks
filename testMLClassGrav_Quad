{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":4865,"status":"ok","timestamp":1655451798530,"user":{"displayName":"kassan abdallah","userId":"09488167868861802107"},"user_tz":-180},"id":"0nZA9wMxRfRV"},"outputs":[],"source":["import tensorflow as tf\n","import cv2\n","import numpy as np\n","import matplotlib.pyplot as plt"]},{"cell_type":"markdown","metadata":{"id":"67QHP3cOu8qf"},"source":["## Import the grav \u0026 quad imgs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7mOHi7gqRjji"},"outputs":[],"source":["grav_list =[]\n","quad_list = []\n","\n","grav_list = [cv2.imread('/content/drive/MyDrive/train/Gravillonage/170.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Gravillonage/172.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Gravillonage/181.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Gravillonage/182.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Gravillonage/183.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Gravillonage/188.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Gravillonage/193.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Gravillonage/198.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Gravillonage/200.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Gravillonage/201.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Gravillonage/221_1.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Gravillonage/252.jpg',0)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OXZ4d651akeJ"},"outputs":[],"source":["quad_list = [cv2.imread('/content/drive/MyDrive/train/Quadrillage/131.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/136.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/170.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/172.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/181.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/182.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/183.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/188.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/193.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/198.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/200.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/201.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/221.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/250.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/253.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/255.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/256.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/259.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/270.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/T02_02_2_U1_Lackierung_Gitterschnitt_GT0.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/T02_02_2_U1_Lackierung_Gitterschnitt_GT5.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/adhesion-test.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/gitterschnitt.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/peigne_adherence_quadrillage-1.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/111.jpg',0),\n","             cv2.imread('/content/drive/MyDrive/train/Quadrillage/112.jpg',0)\n","             ]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1652778319337,"user":{"displayName":"kassan abdallah","userId":"09488167868861802107"},"user_tz":-180},"id":"LHGN1nHbeUD0","outputId":"a17c032e-337c-4380-8e19-e4e93963c0f5"},"outputs":[{"data":{"text/plain":["(None, None)"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["grav_list[10], quad_list[25]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":580},"executionInfo":{"elapsed":438,"status":"error","timestamp":1652778327686,"user":{"displayName":"kassan abdallah","userId":"09488167868861802107"},"user_tz":-180},"id":"ro1121xBebCJ","outputId":"f40e3520-4c16-43f8-fbfd-56a7495cd014"},"outputs":[{"ename":"TypeError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-6-73099c88cb71\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgrav_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----\u003e 2\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Greys_r'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mimshow\u001b[0;34m(X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, shape, filternorm, filterrad, imlim, resample, url, data, **kwargs)\u001b[0m\n\u001b[1;32m   2649\u001b[0m         \u001b[0mfilternorm\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfilternorm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilterrad\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfilterrad\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimlim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mimlim\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2650\u001b[0m         resample=resample, url=url, **({\"data\": data} if data is not\n\u001b[0;32m-\u003e 2651\u001b[0;31m         None else {}), **kwargs)\n\u001b[0m\u001b[1;32m   2652\u001b[0m     \u001b[0msci\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m__ret\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2653\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0m__ret\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1563\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1564\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1565\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1566\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1567\u001b[0m         \u001b[0mbound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_sig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    356\u001b[0m                 \u001b[0;34mf\"%(removal)s.  If any parameter follows {name!r}, they \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    357\u001b[0m                 f\"should be pass as keyword, not positionally.\")\n\u001b[0;32m--\u003e 358\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    359\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    360\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    356\u001b[0m                 \u001b[0;34mf\"%(removal)s.  If any parameter follows {name!r}, they \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    357\u001b[0m                 f\"should be pass as keyword, not positionally.\")\n\u001b[0;32m--\u003e 358\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    359\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    360\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mimshow\u001b[0;34m(self, X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, shape, filternorm, filterrad, imlim, resample, url, **kwargs)\u001b[0m\n\u001b[1;32m   5624\u001b[0m                               resample=resample, **kwargs)\n\u001b[1;32m   5625\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 5626\u001b[0;31m         \u001b[0mim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5627\u001b[0m         \u001b[0mim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_alpha\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5628\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_clip_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36mset_data\u001b[0;34m(self, A)\u001b[0m\n\u001b[1;32m    692\u001b[0m                 not np.can_cast(self._A.dtype, float, \"same_kind\")):\n\u001b[1;32m    693\u001b[0m             raise TypeError(\"Image data of dtype {} cannot be converted to \"\n\u001b[0;32m--\u003e 694\u001b[0;31m                             \"float\".format(self._A.dtype))\n\u001b[0m\u001b[1;32m    695\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    696\u001b[0m         if not (self._A.ndim == 2\n","\u001b[0;31mTypeError\u001b[0m: Image data of dtype object cannot be converted to float"]},{"data":{"image/png":"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\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["img = grav_list[10]\n","plt.imshow(img, cmap='Greys_r');"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"m9W1VufdfYNs"},"outputs":[],"source":["img = quad_list[24]\n","plt.imshow(img, cmap='Greys_r');"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5DvacWfEhgWi"},"outputs":[],"source":["type(grav_list[0]), type(quad_list[0])"]},{"cell_type":"markdown","metadata":{"id":"j_9iCCGFu27u"},"source":["## Resize the imgs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JDfxWGXrh71l"},"outputs":[],"source":["for i in range(len(grav_list)):\n","  img = grav_list[i]\n","  grav_list[i] = np.resize(img, (32, 32))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A-PRYgAwijQv"},"outputs":[],"source":["for i in range(len(quad_list)):\n","  img = quad_list[i]\n","  quad_list[i] = np.resize(img, (32, 32))\n","  print(f\"img:{img}, indx:{i}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TY9UGs8OjuUK"},"outputs":[],"source":["quad_list[25].shape, grav_list[0].shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"USz5U1ON24n6"},"outputs":[],"source":["quad_list[25]"]},{"cell_type":"markdown","metadata":{"id":"X35_1yW7uwnu"},"source":["## Normalize data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VyyStFqxj11C"},"outputs":[],"source":["norm = 0\n","mean = 0\n","for i in range(len(grav_list)):\n","  img = np.array(grav_list[i])\n","  img = img.astype('float32')\n","  mean = np.mean(img, axis=0)\n","  var = np.var(img, axis=0)\n","  norm = (img - mean) / var\n","  t = tf.Variable(norm)\n","  grav_list[i] = t"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"h_T9VdVK3V2Y"},"outputs":[],"source":["print(np.mean(np.array(quad_list[25])))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wIiDWsYJs04D"},"outputs":[],"source":["norm = 0\n","mean = 0\n","for i in range(len(quad_list)):\n","  img = np.array(quad_list[i])\n","  img = img.astype('float32')\n","  mean = np.mean(img, axis=0)\n","  var = np.var(img, axis=0)\n","  norm = (img - mean) / var\n","  t = tf.Variable(norm)\n","  quad_list[i] = t"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"S-q9C_JLoWl7"},"outputs":[],"source":["quad_list[23], grav_list[0]"]},{"cell_type":"markdown","metadata":{"id":"amD1t05Ax0xf"},"source":["## Combine the imgs in tensor"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uJFGHOWauub7"},"outputs":[],"source":["img_grav = np.array(grav_list)\n","img_quad = np.array(quad_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e4i9AOu1vld0"},"outputs":[],"source":["img = np.vstack((img_grav, img_quad))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GxnDqULfwdeH"},"outputs":[],"source":["img.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3oXoRWJsxVPE"},"outputs":[],"source":["img[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lhTB6ppzxXzt"},"outputs":[],"source":["img[0] == img_grav[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-22VwUzyxcpF"},"outputs":[],"source":["img[12] == img_quad[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nbtPmB6oxi93"},"outputs":[],"source":["tensor = tf.constant(img)\n","tensor[0]"]},{"cell_type":"markdown","metadata":{"id":"qPVj3RsoxsHV"},"source":["## Create the dataset"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fY28MM6Bx9u_"},"outputs":[],"source":["len(img_grav)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M5ZeyZj4zF2D"},"outputs":[],"source":["img_grav[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NRQDgrgQzKYw"},"outputs":[],"source":["# Create labels\n","labels_grav = np.zeros(12) + 1 \n","labels_quad = np.zeros(len(img_quad))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sQ0YWczwzZf7"},"outputs":[],"source":["len(labels_grav), len(labels_quad)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p49LfphLz_kc"},"outputs":[],"source":["labels = np.concatenate((labels_grav, labels_quad), axis=0)\n","len(labels)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3utiB0iJ1Mn8"},"outputs":[],"source":["img[:, 0, 0]\n","len(img[:, 0, 0])"]},{"cell_type":"markdown","metadata":{"id":"W3ZgmK3Ux0BA"},"source":["### Generate grav and Quad Img\n"]},{"cell_type":"markdown","metadata":{"id":"fCURj3dmyNYf"},"source":["* Generate Gravillonage Image"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4SYdD4cmyTQX"},"outputs":[],"source":["blank = np.zeros((150, 150), np.int32)\n","plt.imshow(blank, cmap='Greys_r');"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CxvWYkjay861"},"outputs":[],"source":["while True:\n","  a = np.random.randint(10, 100)\n","  b = np.random.randint(10, 100)\n","  if not a == b:\n","    if not a \u003c b /3: \n","        break\n","contour = abs(np.random.randn(a, b)) \n","contour.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ql7dm1Wc0NLf"},"outputs":[],"source":["plt.imshow(contour, cmap='Greys_r');"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gGhaV2P-0u1g"},"outputs":[],"source":["from scipy.special import binom\n","\n","bernstein = lambda n, k, t: binom(n,k)* t**k * (1.-t)**(n-k)\n","\n","def bezier(points, num=200):\n","    N = len(points)\n","    t = np.linspace(0, 1, num=num)\n","    curve = np.zeros((num, 2))\n","    for i in range(N):\n","        curve += np.outer(bernstein(N - 1, i, t), points[i])\n","    return curve\n","\n","class Segment():\n","    def __init__(self, p1, p2, angle1, angle2, **kw):\n","        self.p1 = p1; self.p2 = p2\n","        self.angle1 = angle1; self.angle2 = angle2\n","        self.numpoints = kw.get(\"numpoints\", 100)\n","        r = kw.get(\"r\", 0.3)\n","        d = np.sqrt(np.sum((self.p2-self.p1)**2))\n","        self.r = r*d\n","        self.p = np.zeros((4,2))\n","        self.p[0,:] = self.p1[:]\n","        self.p[3,:] = self.p2[:]\n","        self.calc_intermediate_points(self.r)\n","\n","    def calc_intermediate_points(self,r):\n","        self.p[1,:] = self.p1 + np.array([self.r*np.cos(self.angle1),\n","                                    self.r*np.sin(self.angle1)])\n","        self.p[2,:] = self.p2 + np.array([self.r*np.cos(self.angle2+np.pi),\n","                                    self.r*np.sin(self.angle2+np.pi)])\n","        self.curve = bezier(self.p,self.numpoints)\n","\n","def get_curve(points, **kw):\n","    segments = []\n","    for i in range(len(points)-1):\n","        seg = Segment(points[i,:2], points[i+1,:2], points[i,2],points[i+1,2],**kw)\n","        segments.append(seg)\n","    curve = np.concatenate([s.curve for s in segments])\n","    return segments, curve\n","\n","def ccw_sort(p):\n","    d = p-np.mean(p,axis=0)\n","    s = np.arctan2(d[:,0], d[:,1])\n","    return p[np.argsort(s),:]\n","\n","def get_bezier_curve(a, rad=0.2, edgy=0):\n","    \"\"\" given an array of points *a*, create a curve through\n","    those points. \n","    *rad* is a number between 0 and 1 to steer the distance of\n","          control points.\n","    *edgy* is a parameter which controls how \"edgy\" the curve is,\n","           edgy=0 is smoothest.\"\"\"\n","    p = np.arctan(edgy)/np.pi+.5\n","    a = ccw_sort(a)\n","    a = np.append(a, np.atleast_2d(a[0,:]), axis=0)\n","    d = np.diff(a, axis=0)\n","    ang = np.arctan2(d[:,1],d[:,0])\n","    f = lambda ang : (ang\u003e=0)*ang + (ang\u003c0)*(ang+2*np.pi)\n","    ang = f(ang)\n","    ang1 = ang\n","    ang2 = np.roll(ang,1)\n","    ang = p*ang1 + (1-p)*ang2 + (np.abs(ang2-ang1) \u003e np.pi )*np.pi\n","    ang = np.append(ang, [ang[0]])\n","    a = np.append(a, np.atleast_2d(ang).T, axis=1)\n","    s, c = get_curve(a, r=rad, method=\"var\")\n","    x,y = c.T\n","    return x,y, a\n","\n","def get_random_points(n=5, scale=0.8, mindst=None, rec=0):\n","    \"\"\" create n random points in the unit square, which are *mindst*\n","    apart, then scale them.\"\"\"\n","    mindst = mindst or .7/n\n","    a = np.random.rand(n,2)\n","    d = np.sqrt(np.sum(np.diff(ccw_sort(a), axis=0), axis=1)**2)\n","    if np.all(d \u003e= mindst) or rec\u003e=200:\n","        return a*scale\n","    else:\n","        return get_random_points(n=n, scale=scale, mindst=mindst, rec=rec+1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d49MeGN31bOQ"},"outputs":[],"source":["fig, ax = plt.subplots()\n","ax.set_aspect(\"equal\")\n","\n","rad = 0.25\n","edgy = 0.05\n","h = np.array([[0,0], [0,1], [1,0], [1,1],[1,2], [2,1], [2,2], [1,3], [3,1],[2,3], [3,2]])\n","print(h.shape)\n","for c in h:\n","    print(len(c)/ 2)\n","    a = get_random_points(n=9, scale=1) + c\n","    x,y, _ = get_bezier_curve(a,rad=rad, edgy=edgy)\n","    plt.plot(x,y)\n","\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6wfliE8EL99Z"},"outputs":[],"source":["def create_array():\n","  c = None\n","  while True:\n","    a = np.random.randint(10, 26)\n","    b =  np.random.randint(10, 26)\n","    if not (a == b and a \u003c b /3 and (a/b) % 2 == 0):\n","        break\n","  for i in range(a):\n","    j = 0\n","    while j\u003cb:\n","      c = np.append(c, [[i,j]])\n","      j +=1\n","  c = c[1:]\n","  c = c.reshape((-1, 2))\n","  array = np.array(c, dtype=np.float32)\n","  print(type(array))\n","  return array"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SvHg2BuKGgDK"},"outputs":[],"source":["import cv2\n","import skimage.exposure\n","import numpy as np\n","from numpy.random import default_rng\n","\n","def random_quadrillage_generator(indice=1, width=500, height=500, sigmaX=10, sigmaY=10, thresh=200, blur=11, path='/content/drive/MyDrive/test/'):\n","  # define random seed to change the pattern\n","  rng = default_rng()\n","  # create random noise image\n","  noise = rng.integers(0, 255, (height,width), np.uint8, True)\n","\n","  # blur the noise image to control the size\n","  blur = cv2.GaussianBlur(noise, (blur,blur), sigmaX, sigmaY, borderType = cv2.BORDER_DEFAULT)\n","\n","  # stretch the blurred image to full dynamic range\n","  stretch = skimage.exposure.rescale_intensity(blur, in_range='image', out_range=(0,255)).astype(np.uint8)\n","\n","  # threshold stretched image to control the size\n","  thresh = cv2.threshold(stretch, thresh, 255, cv2.THRESH_BINARY)[1]\n","  # apply morphology open and close to smooth out shapes\n","  kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3,3))\n","  result = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel)\n","  result = cv2.morphologyEx(result, cv2.MORPH_CLOSE, kernel)\n","  horizantal = np.random.randint(4, 15)\n","  verticale = np.random.randint(4, 15)\n","\n","  for i in range (1, horizantal + 1):\n","    fact = np.random.randint(50, 100)\n","    ponte = np.random.randint(10, 20)\n","    #fact = 50\n","    h = 99 + i*ponte + fact\n","    cv2.line(result, (100,h), (400,h), (255,0,0), 2)\n","  for i in range(1, verticale + 1):\n","    fact = np.random.randint(50, 100)\n","    ponte = np.random.randint(10, 20)\n","    v = 119 + i*ponte + fact\n","    cv2.line(result, (v,100), (v,400), (255,0,0), 2)\n","\n","  guess = np.random.randint(0, 1)\n","  if guess == 0:\n","    # Rotation\n","    rot = np.random.randint(-15, 15)\n","    (h, w) = result.shape[:2]\n","    center = (w / 2, h / 2)\n","    angle = rot\n","    scale = 1\n","\n","    M = cv2.getRotationMatrix2D(center, angle, scale)\n","    result= cv2.warpAffine(result, M, (w, h))\n","   # save result\n","  cv2.imwrite(''f'{path}'f'{indice}_{indice}.jpg', result)\n","  print(f\"Done{indice}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ViokuaPrBvQ6"},"outputs":[],"source":["def random_gravillonage_generator(indice=1, width=500, height=500, sigmaX=10, sigmaY=10, thresh=175, blur=0, path='/content/drive/MyDrive/test/'):\n","  # define random seed to change the pattern\n","  rng = default_rng()\n","  # create random noise image\n","  noise = rng.integers(0, 255, (height,width), np.uint8, True)\n","\n","  # blur the noise image to control the size\n","  blur = cv2.GaussianBlur(noise, (blur,blur), sigmaX, sigmaY, borderType = cv2.BORDER_DEFAULT)\n","\n","  # stretch the blurred image to full dynamic range\n","  stretch = skimage.exposure.rescale_intensity(blur, in_range='image', out_range=(0,255)).astype(np.uint8)\n","\n","  # threshold stretched image to control the size\n","  thresh = cv2.threshold(stretch, thresh, 255, cv2.THRESH_BINARY)[1]\n","\n","  # apply morphology open and close to smooth out shapes\n","  kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3,3))\n","  result = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel)\n","  result = cv2.morphologyEx(result, cv2.MORPH_CLOSE, kernel)\n","\n","  # save result\n","  cv2.imwrite(''f'{path}'f'{indice}_{indice}.jpg', result)\n","  print(f\"Done{indice}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vuiPWo02BwK1"},"outputs":[],"source":["'''\n","# train_grav set\n","for i in range(1, 3000):\n","  width = np.random.randint(200, 800)\n","  height = np.random.randint(200, 800)\n","  sigmaX = np.random.randint(10, 15)\n","  sigmaY = np.random.randint(10, 15)\n","  thresh = np.random.randint(150, 200)\n","  while True:\n","    blur = np.random.randint(0,9)\n","    if not blur%2 == 0:\n","      break\n","  random_gravillonage_generator(i, width=width, height=height, sigmaX=sigmaX, sigmaY=sigmaY, thresh=thresh, blur=blur, path='/content/drive/MyDrive/train/Gravillonage/')\n","  '''"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bkWE2a-eFS3y"},"outputs":[],"source":["'''\n","# train_quad set\n","for i in range(1, 3000):\n","  width = np.random.randint(200, 800)\n","  height = np.random.randint(200, 800)\n","  sigmaX = np.random.randint(10, 15)\n","  sigmaY = np.random.randint(10, 15)\n","  thresh = np.random.randint(180, 210)\n","  while True:\n","    blur = np.random.randint(11,15)\n","    if not blur%2 == 0:\n","      break\n","  random_quadrillage_generator(i, width=width, height=height, sigmaX=sigmaX, sigmaY=sigmaY, thresh=thresh, blur=blur, path='/content/drive/MyDrive/train/Quadrillage/')\n","  '''"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yppAAqsq6tv7"},"outputs":[],"source":["'''\n","# test file creation\n","for i in range(1, 151):\n","  width1 = np.random.randint(200, 800)\n","  height1 = np.random.randint(200, 800)\n","  sigmaX1 = np.random.randint(10, 15)\n","  sigmaY1 = np.random.randint(10, 15)\n","  thresh1 = np.random.randint(150, 200)\n","  while True:\n","    blur1 = np.random.randint(0,9)\n","    if not blur1%2 == 0:\n","      break\n","  random_gravillonage_generator(i, width=width1, height=height1, sigmaX=sigmaX1, sigmaY=sigmaY1, thresh=thresh1, blur=blur1)\n","  width = np.random.randint(200, 800)\n","  height = np.random.randint(200, 800)\n","  sigmaX = np.random.randint(10, 15)\n","  sigmaY = np.random.randint(10, 15)\n","  thresh = np.random.randint(180, 210)\n","  while True:\n","    blur = np.random.randint(11,15)\n","    if not blur%2 == 0:\n","      break\n","  random_quadrillage_generator(i+150, width=width, height=height, sigmaX=sigmaX, sigmaY=sigmaY, thresh=thresh, blur=blur)\n","  '''"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aljcLH4y_VeN"},"outputs":[],"source":["'''\n","# validation_grav set\n","for i in range(1, 150):\n","  width = np.random.randint(200, 800)\n","  height = np.random.randint(200, 800)\n","  sigmaX = np.random.randint(10, 15)\n","  sigmaY = np.random.randint(10, 15)\n","  thresh = np.random.randint(150, 200)\n","  while True:\n","    blur = np.random.randint(0,9)\n","    if not blur%2 == 0:\n","      break\n","  random_gravillonage_generator(i, width=width, height=height, sigmaX=sigmaX, sigmaY=sigmaY, thresh=thresh, blur=blur, path='/content/drive/MyDrive/validation/Gravillonage/')\n","'''"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XCo9m6NtAVKb"},"outputs":[],"source":["'''\n","# validation_quad set\n","for i in range(1, 150):\n","  width = np.random.randint(200, 800)\n","  height = np.random.randint(200, 800)\n","  sigmaX = np.random.randint(10, 15)\n","  sigmaY = np.random.randint(10, 15)\n","  thresh = np.random.randint(180, 210)\n","  while True:\n","    blur = np.random.randint(11,15)\n","    if not blur%2 == 0:\n","      break\n","  random_quadrillage_generator(i, width=width, height=height, sigmaX=sigmaX, sigmaY=sigmaY, thresh=thresh, blur=blur, path='/content/drive/MyDrive/validation/Quadrillage/')\n","  '''"]},{"cell_type":"markdown","metadata":{"id":"iB5pEp5oSI4g"},"source":["### Create train, validation and test sets"]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":319,"status":"ok","timestamp":1655451807083,"user":{"displayName":"kassan abdallah","userId":"09488167868861802107"},"user_tz":-180},"id":"dZnxqhjw6luj"},"outputs":[],"source":["try:\n","  # This command only in Colab.\n","  %tensorflow_version 2.x\n","except Exception:\n","  pass\n","import tensorflow as tf\n","\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","import os\n","import numpy as np\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":12040,"status":"ok","timestamp":1655451821922,"user":{"displayName":"kassan abdallah","userId":"09488167868861802107"},"user_tz":-180},"id":"ZMixXmme8AL0"},"outputs":[],"source":["PATH = '/content/drive/MyDrive/Grav_Quad'\n","train_dir = os.path.join(PATH, 'train')\n","validation_dir = os.path.join(PATH, 'validation')\n","test_dir = os.path.join(PATH, 'test')\n","\n","# Get number of files in each directory. The train and validation directories\n","# each have the subdirecories \"dogs\" and \"cats\".\n","total_train = sum([len(files) for r, d, files in os.walk(train_dir)])\n","total_val = sum([len(files) for r, d, files in os.walk(validation_dir)])\n","total_test = len(os.listdir(test_dir))\n","\n","# Variables for pre-processing and training.\n","batch_size = 128\n","epochs = 15\n","IMG_HEIGHT = 150\n","IMG_WIDTH = 150"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":36,"status":"ok","timestamp":1655451821923,"user":{"displayName":"kassan abdallah","userId":"09488167868861802107"},"user_tz":-180},"id":"yzJxCiM3MzFA","outputId":"8da1a65a-ad66-46c9-e8bd-98278c754d70"},"outputs":[{"data":{"text/plain":["(6036, 298, 1)"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["total_train, total_val, total_test"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1378,"status":"ok","timestamp":1655451823287,"user":{"displayName":"kassan abdallah","userId":"09488167868861802107"},"user_tz":-180},"id":"wSpBeQ8pNEFq","outputId":"2522bb47-a915-4bb2-fbab-bfc5b910699a"},"outputs":[{"name":"stdout","output_type":"stream","text":["Found 6036 images belonging to 2 classes.\n","Found 298 images belonging to 2 classes.\n","Found 300 images belonging to 1 classes.\n"]}],"source":["from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","train_image_generator = ImageDataGenerator(rescale=1./255)\n","validation_image_generator =  ImageDataGenerator(rescale=1./255)\n","test_image_generator = ImageDataGenerator(rescale=1./255)\n","\n","train_data_gen =  train_image_generator.flow_from_directory(train_dir,target_size=(IMG_HEIGHT,IMG_WIDTH), batch_size=batch_size,class_mode='binary', seed=42)\n","val_data_gen = validation_image_generator.flow_from_directory(validation_dir, target_size=(IMG_HEIGHT,IMG_WIDTH), batch_size=batch_size,class_mode='binary',seed=42)\n","test_data_gen = test_image_generator.flow_from_directory(\n","    directory=test_dir,\n","    target_size=(IMG_HEIGHT, IMG_WIDTH),\n","    batch_size=1,\n","    class_mode= None,\n","    shuffle=False,\n","    classes=['test_subdirc'] ,\n","    seed=42,\n",")"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":846},"executionInfo":{"elapsed":50692,"status":"ok","timestamp":1655451873964,"user":{"displayName":"kassan abdallah","userId":"09488167868861802107"},"user_tz":-180},"id":"ND6gBZ4nPXIN","outputId":"ed09dee1-8d7e-41a1-b9c5-8d894cd89ffa"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 360x1080 with 5 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["def plotImages(images_arr, probabilities = False):\n","    fig, axes = plt.subplots(len(images_arr), 1, figsize=(5,len(images_arr) * 3))\n","    if probabilities is False:\n","      for img, ax in zip( images_arr, axes):\n","          ax.imshow(img)\n","          ax.axis('off')\n","    else:\n","      for img, probability, ax in zip( images_arr, probabilities, axes):\n","          ax.imshow(img)\n","          ax.axis('off')\n","          if probability \u003e 0.5:\n","              ax.set_title(\"%.2f\" % (probability*100) + \"% dog\")\n","          else:\n","              ax.set_title(\"%.2f\" % ((1-probability)*100) + \"% cat\")\n","    plt.show()\n","\n","sample_training_images, _ = next(train_data_gen)\n","plotImages(sample_training_images[:5])\n"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4416,"status":"ok","timestamp":1655451878296,"user":{"displayName":"kassan abdallah","userId":"09488167868861802107"},"user_tz":-180},"id":"YO3OC07OQSv6","outputId":"91d9d9fb-e73e-451c-e237-67d7bb62a9c7"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 150, 150, 32)      896       \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 75, 75, 32)       0         \n"," )                                                               \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 75, 75, 64)        18496     \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 37, 37, 64)       0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 37, 37, 128)       73856     \n","                                                                 \n"," max_pooling2d_2 (MaxPooling  (None, 18, 18, 128)      0         \n"," 2D)                                                             \n","                                                                 \n"," dropout (Dropout)           (None, 18, 18, 128)       0         \n","                                                                 \n"," flatten (Flatten)           (None, 41472)             0         \n","                                                                 \n"," dense (Dense)               (None, 128)               5308544   \n","                                                                 \n"," dropout_1 (Dropout)         (None, 128)               0         \n","                                                                 \n"," dense_1 (Dense)             (None, 1)                 129       \n","                                                                 \n","=================================================================\n","Total params: 5,401,921\n","Trainable params: 5,401,921\n","Non-trainable params: 0\n","_________________________________________________________________\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/gradient_descent.py:102: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(SGD, self).__init__(name, **kwargs)\n"]}],"source":["model = Sequential()\n","model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_HEIGHT, IMG_WIDTH, 3), kernel_initializer='he_uniform', padding='same'))\n","model.add(MaxPooling2D(2, 2))\n","model.add(Conv2D(64, (3,3), activation='relu',kernel_initializer='he_uniform', padding='same'))\n","model.add(MaxPooling2D(2, 2))\n","model.add(Conv2D(128, (3,3), activation='relu',kernel_initializer='he_uniform', padding='same'))\n","model.add(MaxPooling2D(2, 2))\n","model.add(Dropout(.2))\n","model.add(Flatten())\n","model.add(Dense(128, activation='relu',kernel_initializer='he_uniform'))\n","model.add(Dropout(.5))\n","model.add(Dense(1, 'sigmoid'))\n","model.compile(loss=tf.keras.losses.BinaryCrossentropy(),\n","                optimizer=tf.keras.optimizers.SGD(lr=0.001, momentum=0.9),\n","                metrics=[\"accuracy\"])\n","model.summary()"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":18,"status":"ok","timestamp":1655451878296,"user":{"displayName":"kassan abdallah","userId":"09488167868861802107"},"user_tz":-180},"id":"SFkPdjnhQbRD"},"outputs":[],"source":["step = total_train//batch_size\n","val_step = (total_val//batch_size)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"VmHcaGEJQf6L"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/30\n","47/47 [==============================] - 772s 16s/step - loss: 0.2254 - accuracy: 0.9076 - val_loss: 0.0895 - val_accuracy: 0.9688\n","Epoch 2/30\n","47/47 [==============================] - 20s 426ms/step - loss: 0.0710 - accuracy: 0.9802 - val_loss: 0.0616 - val_accuracy: 0.9766\n","Epoch 3/30\n","47/47 [==============================] - 20s 428ms/step - loss: 0.0439 - accuracy: 0.9912 - val_loss: 0.0380 - val_accuracy: 0.9844\n","Epoch 4/30\n","47/47 [==============================] - 20s 427ms/step - loss: 0.0279 - accuracy: 0.9940 - val_loss: 0.0374 - val_accuracy: 0.9883\n","Epoch 5/30\n","47/47 [==============================] - 20s 426ms/step - loss: 0.0225 - accuracy: 0.9958 - val_loss: 0.0362 - val_accuracy: 0.9844\n","Epoch 6/30\n","47/47 [==============================] - 20s 428ms/step - loss: 0.0176 - accuracy: 0.9961 - val_loss: 0.0425 - val_accuracy: 0.9805\n","Epoch 7/30\n","47/47 [==============================] - 20s 434ms/step - loss: 0.0125 - accuracy: 0.9971 - val_loss: 0.0326 - val_accuracy: 0.9883\n","Epoch 8/30\n","47/47 [==============================] - 20s 426ms/step - loss: 0.0131 - accuracy: 0.9963 - val_loss: 0.0305 - val_accuracy: 0.9883\n","Epoch 9/30\n","47/47 [==============================] - 20s 423ms/step - loss: 0.0124 - accuracy: 0.9959 - val_loss: 0.0140 - val_accuracy: 0.9961\n","Epoch 10/30\n","47/47 [==============================] - 20s 423ms/step - loss: 0.0101 - accuracy: 0.9985 - val_loss: 0.0263 - val_accuracy: 0.9922\n","Epoch 11/30\n","47/47 [==============================] - 20s 416ms/step - loss: 0.0098 - accuracy: 0.9968 - val_loss: 0.0215 - val_accuracy: 0.9922\n","Epoch 12/30\n","47/47 [==============================] - 20s 421ms/step - loss: 0.0096 - accuracy: 0.9970 - val_loss: 0.0317 - val_accuracy: 0.9844\n","Epoch 13/30\n","47/47 [==============================] - 20s 424ms/step - loss: 0.0076 - accuracy: 0.9980 - val_loss: 0.0208 - val_accuracy: 0.9922\n","Epoch 14/30\n","47/47 [==============================] - 20s 426ms/step - loss: 0.0070 - accuracy: 0.9975 - val_loss: 0.0182 - val_accuracy: 0.9922\n","Epoch 15/30\n","47/47 [==============================] - 20s 422ms/step - loss: 0.0053 - accuracy: 0.9983 - val_loss: 0.0154 - val_accuracy: 0.9922\n","Epoch 16/30\n","47/47 [==============================] - 20s 425ms/step - loss: 0.0053 - accuracy: 0.9983 - val_loss: 0.0180 - val_accuracy: 0.9922\n","Epoch 17/30\n","47/47 [==============================] - 21s 437ms/step - loss: 0.0055 - accuracy: 0.9980 - val_loss: 0.0279 - val_accuracy: 0.9883\n","Epoch 18/30\n","47/47 [==============================] - 20s 425ms/step - loss: 0.0063 - accuracy: 0.9980 - val_loss: 0.0204 - val_accuracy: 0.9922\n","Epoch 19/30\n","47/47 [==============================] - 20s 425ms/step - loss: 0.0050 - accuracy: 0.9983 - val_loss: 0.0186 - val_accuracy: 0.9922\n","Epoch 20/30\n","47/47 [==============================] - 20s 431ms/step - loss: 0.0031 - accuracy: 0.9997 - val_loss: 0.0149 - val_accuracy: 0.9961\n","Epoch 21/30\n","47/47 [==============================] - 20s 425ms/step - loss: 0.0058 - accuracy: 0.9985 - val_loss: 0.0203 - val_accuracy: 0.9922\n","Epoch 22/30\n","47/47 [==============================] - 20s 426ms/step - loss: 0.0035 - accuracy: 0.9993 - val_loss: 0.0204 - val_accuracy: 0.9922\n","Epoch 23/30\n","47/47 [==============================] - 20s 427ms/step - loss: 0.0037 - accuracy: 0.9986 - val_loss: 0.0172 - val_accuracy: 0.9922\n","Epoch 24/30\n","47/47 [==============================] - 20s 424ms/step - loss: 0.0036 - accuracy: 0.9990 - val_loss: 0.0175 - val_accuracy: 0.9922\n","Epoch 25/30\n","47/47 [==============================] - 20s 426ms/step - loss: 0.0033 - accuracy: 0.9988 - val_loss: 0.0080 - val_accuracy: 0.9961\n","Epoch 26/30\n","47/47 [==============================] - 20s 425ms/step - loss: 0.0034 - accuracy: 0.9988 - val_loss: 0.0170 - val_accuracy: 0.9922\n","Epoch 27/30\n","47/47 [==============================] - 20s 422ms/step - loss: 0.0034 - accuracy: 0.9992 - val_loss: 0.0117 - val_accuracy: 0.9961\n","Epoch 28/30\n","47/47 [==============================] - 20s 422ms/step - loss: 0.0031 - accuracy: 0.9990 - val_loss: 0.0182 - val_accuracy: 0.9922\n","Epoch 29/30\n","47/47 [==============================] - 20s 428ms/step - loss: 0.0040 - accuracy: 0.9983 - val_loss: 0.0091 - val_accuracy: 0.9961\n","Epoch 30/30\n","47/47 [==============================] - 20s 433ms/step - loss: 0.0033 - accuracy: 0.9988 - val_loss: 0.0136 - val_accuracy: 0.9961\n"]}],"source":["history = model.fit(train_data_gen,\n","        steps_per_epoch=step,\n","        epochs=30,\n","        validation_data=val_data_gen,\n","        validation_steps=val_step)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"MVhK2ZEKR3O8"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 576x576 with 2 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs_range = range(30)\n","\n","plt.figure(figsize=(8, 8))\n","plt.subplot(1, 2, 1)\n","plt.plot(epochs_range, acc, label='Training Accuracy')\n","plt.plot(epochs_range, val_acc, label='Validation Accuracy')\n","plt.legend(loc='lower right')\n","plt.title('Training and Validation Accuracy')\n","\n","plt.subplot(1, 2, 2)\n","plt.plot(epochs_range, loss, label='Training Loss')\n","plt.plot(epochs_range, val_loss, label='Validation Loss')\n","plt.legend(loc='upper right')\n","plt.title('Training and Validation Loss')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4ycO_nC8TRzj"},"outputs":[],"source":["probabilities = model.predict(test_data_gen)\n","probabilities[probabilities \u003e 0.5] = 1\n","probabilities[probabilities \u003c 0.5] = 0\n","probabilities"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"zHSwozkir8Ki"},"outputs":[],"source":["model.save('/content/drive/MyDrive/model_grav_quad_class.h5')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"0yO_UcHefChy"},"outputs":[],"source":["for i in range(len(probabilities)):\n","  print(f\"probabilites: {probabilities[i]}, {i}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GA2KP16cr1Vv"},"outputs":[],"source":["grav = 0\n","quad = 0\n","\n","for i in range(len(probabilities)):\n","  if probabilities[i]==0:\n","    grav +=1\n","  else:\n","    quad +=1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8UKQA6Jz0KiC"},"outputs":[],"source":["grav, quad"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0B24W24s0MT-"},"outputs":[],"source":["model = tf.keras.models.load_model('/content/drive/MyDrive/model_grav_quad_class.h5')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Qtfo4D-pXxAj"},"outputs":[],"source":["PATH = '/content'\n","test_dir = os.path.join(PATH, 'test')\n","total_test = len(os.listdir(test_dir))\n","batch_size = 128\n","epochs = 15\n","IMG_HEIGHT = 150\n","IMG_WIDTH = 150\n","\n","test_image_generator = ImageDataGenerator(rescale=1./255)\n","\n","test_data_gen = test_image_generator.flow_from_directory(\n","    directory=test_dir,\n","    target_size=(IMG_HEIGHT, IMG_WIDTH),\n","    batch_size=1,\n","    class_mode= None,\n","    shuffle=False,\n","    classes=['test_subdirc'] ,\n","    seed=42,\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dSmy8tFD8Uuw"},"outputs":[],"source":["probabilities = model.predict(test_data_gen)\n","probabilities"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":616,"status":"ok","timestamp":1652797161618,"user":{"displayName":"kassan abdallah","userId":"09488167868861802107"},"user_tz":-180},"id":"FAb5rptLYxr1","outputId":"3bc80a86-e2b9-4c70-836b-7f2e3ada71a7"},"outputs":[{"data":{"text/plain":["array([[1.],\n","       [0.],\n","       [1.],\n","       [0.],\n","       [1.],\n","       [0.],\n","       [1.],\n","       [0.],\n","       [1.],\n","       [0.]], dtype=float32)"]},"execution_count":19,"metadata":{},"output_type":"execute_result"}],"source":["probabilities = model.predict(test_data_gen)\n","probabilities[probabilities \u003e 0.5] = 1\n","probabilities[probabilities \u003c 0.5] = 0\n","probabilities"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qSoXIajiYzvT"},"outputs":[],"source":[""]}],"metadata":{"accelerator":"GPU","colab":{"authorship_tag":"ABX9TyPdpfZw6qenjSsO57GxdJ7a","collapsed_sections":[],"mount_file_id":"1SfZtzhQFF-q7SvzneyeI6tFz4HFZ_nrB","name":"testMLClassGrav\u0026Quad","version":""},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}